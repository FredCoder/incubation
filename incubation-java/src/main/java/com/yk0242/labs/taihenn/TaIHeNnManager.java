package com.yk0242.labs.taihenn;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

/** TaIHeNnManager (THM) - class to manage TaIHeNn generation - 
 *   an array arr representing random configurations of 'た','い','へ', and 'ん'. 
 *   Advances arr and returns necessary parameters when called for. <br>
 *   <br>
 *   (NB - is customizable to a degree, but expected strings are fixed to <br>
 *     1) original REPSTR array (たいへん)<br>
 *     2) REPSTR array from middle looped once (へんたい) )
 *  
 */
public class TaIHeNnManager {
	/* constant string */
	private static final char[] REPSTR = {'た','い','へ','ん'};//replacement String
	/* internal vars */
	private Random rng = new Random();//Random Number Generator
	private List<Integer> arr; //list of Ints representing the output char String
	private int taihenCtr; //keeps track of occurrence of たいへん string
	private int hentaiCtr; //keeps track of occurrence of へんたい string
	/** If true, does not set arr, so the history string is no longer accessible. 
	 * If turned on, getStr() will no longer work as expected (will return empty string), 
	 * but processing speeds up, and program will not terminate with this: 
	 * "Exception in thread "main" java.lang.OutOfMemoryError: Java heap space"
	 */
	private boolean noHistory = false;
	private int ctr; //counts number of letters used if noHistory is true
	private char ch; //stores last char generated if noHistory is true
	
	/* *** default constructor ***/
	public TaIHeNnManager(){
		this.init();//initializations refactored here
	}
	
	/* **** initializer ***/
	private final void init(){
		arr=new ArrayList<Integer>();
		taihenCtr=0;
		hentaiCtr=0;
		ctr=0;
		ch=' ';
	}
	
	/* ******************/
	/* Public Functions */
	/* ******************/
	/**
	 * advances THM string by one unit.
	 * @return this (THM) (for method chaining)
	 */
	public TaIHeNnManager advance(){
		int repStrLen = REPSTR.length;
		
		//*** increment arr by one
		int i = rng.nextInt(repStrLen);
		if(!noHistory) arr.add(i);
		else { ctr++; ch = REPSTR[i]; }//workaround if setNoHistory() has been activated
		
		//*** process taihenCtr
		//if ctr is full and advance is called, reset ctr
		if(taihenCtr == repStrLen) taihenCtr = 0;
		//if expected char appears, then ctr++; else reset ctr
		if(i == taihenCtr) taihenCtr++;
		else taihenCtr = 0;
		//fix bug #17 - if counter reset when たた appears, taihenCtr should be 1. 
		if(i == 0) taihenCtr=1;
		
		//*** process hentaiCtr
		//if ctr is full and advance is called, reset ctr
		if(hentaiCtr == repStrLen) hentaiCtr = 0;
		//if expected char appears, then ctr++; else reset ctr
		if(i == (hentaiCtr+repStrLen/2)%repStrLen ) hentaiCtr++;
		else hentaiCtr = 0;
		//fix bug #17 - if counter reset when へへ appears, hentaiCtr should be 1. 
		if(i == repStrLen/2) hentaiCtr=1;
		
		//return this to allow for method chaining
		return this;
	}
	
	/**
	 * gets length of current arr
	 * @return int length of current arr
	 */
	public int getArrLen(){
		if(!noHistory) return arr.size();
		else return ctr;//workaround if setNoHistory() has been activated
	}
	
	/**
	 * gets last char generated by THM
	 * @return char representing last generated int of this THM
	 * @throws IndexOutOfBoundsException if advance() has never been called (and arr.size() or ctr is 0)
	 */
	public char getLastChar() throws IndexOutOfBoundsException {
		if(!noHistory) return REPSTR[arr.get(arr.size()-1)];
//		else return ch;//workaround if setNoHistory() has been activated
		//edit else statement to match what happens without setNoHistory()
		else{
			if (ctr==0) 
				throw new IndexOutOfBoundsException("getLastChar() called before advance() after reset by setNoHistory()");
			else return ch;
		}
	}
	
	/**
	 * @return boolean true if taihenCtr is full; false otherwise
	 */
	public boolean isTaihen(){
		return (taihenCtr == REPSTR.length);
	}
	
	/**
	 * @return boolean true if hentaiCtr is full; false otherwise
	 */
	public boolean isHentai(){
		return (hentaiCtr == REPSTR.length);
	}
	
	/**
	 * If called, does not store the output history string internally. <br>
	 * Use to speed up processing, and prevent program from terminating with: <br> 
	 * "Exception in thread "main" java.lang.OutOfMemoryError: Java heap space". <br>
	 * NB - there is no way to undo this call. <br> 
	 * NB2- calling this resets the THM, to prevent mismatch problems, so call at 
	 *   beginning of your code if necessary. 
	 */
	public void setNoHistory(){
		//initialize to prevent mismatches
		this.init();
		//set flag
		this.noHistory=true;
	}
	
	/* ***********************************************************************/
	/* Functions mainly for testing and debugging purposes (package private) */
	/* ***********************************************************************/
	/**
	 * gets String representing current arr
	 * @return String representing current arr
	 */
	String getStr(){
		StringBuilder sb = new StringBuilder();
		for(int ctr=0; ctr<arr.size(); ctr++){
			int i = arr.get(ctr);
			if (i > REPSTR.length) //JIC
				throw new ArrayIndexOutOfBoundsException("index > repStr.length at ctr "+ctr);
			sb.append(REPSTR[i]);
		}
		return sb.toString();
	}
	
}
